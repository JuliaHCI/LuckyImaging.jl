var documenterSearchIndex = {"docs":
[{"location":"api/#API/Reference","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"","category":"page"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"","category":"page"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"lucky_image\nclassic_lucky_image\nclassic_lucky_image!\nfourier_lucky_image\ntestcube","category":"page"},{"location":"api/#LuckyImaging.lucky_image","page":"API/Reference","title":"LuckyImaging.lucky_image","text":"lucky_image(cube; dims, q, alg=:fourier, kwargs...)\n\nPerform lucky imaging along dims with the chosen algorithm. If alg is :fourier fourier_lucky_image will be used, otherwise if it is :classic classic_lucky_image will be used. The keyword arguments for those methods can be passed directly through this method. q is the selection quantile; in other words, it is one minus the selection fraction.\n\nExamples\n\njulia> cube = # load data\n\njulia> image = lucky_image(cube; dims=3, q=0.9, alg=:classic, upsample_factor=10);\n\njulia> imagef = lucky_image(cube; dims=3, q=0.5, alg=:fourier, upsample_factor=10);\n\nSee also\n\nclassic_lucky_image, fourier_lucky_image\n\n\n\n\n\n","category":"function"},{"location":"api/#LuckyImaging.classic_lucky_image","page":"API/Reference","title":"LuckyImaging.classic_lucky_image","text":"classic_lucky_image(cube; dims, q, metric=:peak, register=:dft, kwargs...)\n\nPerform classic lucky imaging for a cube of data along dimension dims. The selection fraction is set by the quantile q, where q=0.9 corresponds to a 10% selectrion fraction. The following options are available for modifying the metric used for selection as well as how the frames are registered.\n\nMetrics\n\nThe following metrics, set with the keyword argument metric are available\n\n:peak - the maximum value\n:mean - the mean value\nother - pass a function with the signature f(::AbstractMatrix) which returns a single value\n\nRegistration\n\nThe following options for registering the selected frames are available, set with the registerkeyword argument. Extra options can be provided to kwargs...\n\n:dft - use SubpixelRegistration.jl to register the frames using their phase offsets. The reference frame will be the one with the highest metric, and keyword arguments like upsample_factor can be passed directly.\n:peak - register to maximum value\n:com - register to center of mass\n\nKeyword arguments\n\ndims - the dimension along which to perform lucky imaging (required)\nq - the selection quantile (required)\nmetric - the metric used for selection. Default is :peak\nregister - the method used for registration. Default is :dft\nwindow - if provided, will measure the metric and frame offsets inside a centered window with window side length.\nkwargs... - additional keyword arguments will be passed to the register method (e.g., upsample_factor)\n\nExamples\n\njulia> cube = # load data ...\n\njulia> res = classic_lucky_image(cube; dims=3, q=0.9, upsample_factor=10)\n\nSee Also\n\nclassic_lucky_image!\n\n\n\n\n\n","category":"function"},{"location":"api/#LuckyImaging.classic_lucky_image!","page":"API/Reference","title":"LuckyImaging.classic_lucky_image!","text":"classic_lucky_image!(out::AbstractMatrix, cube; dims, q, kwargs...)\n\nPerform classic lucky imaging and store the combined frame in out. See classic_lucky_image for a full description.\n\n\n\n\n\n","category":"function"},{"location":"api/#LuckyImaging.fourier_lucky_image","page":"API/Reference","title":"LuckyImaging.fourier_lucky_image","text":"fourier_lucky_image(cube; dims, q, register=:dft, kwargs...)\n\nPerform Fourier lucky imaging following the algorithm in Garrel, Guyon, and Baudoz (2012).[1] This technique provides superior sharpness compared to classic lucky imaging for the same selection percentage. This means for a desired angular resolution (or Strehl ratio) a higher signal-to-noise ratio can be achieved.\n\n[1]: Vincent Garrel et al 2012 \"A Highly Efficient Lucky Imaging Algorithm: Image Synthesis Based on Fourier Amplitude Selection\" PASP 124 861\n\nRegistration\n\nBefore processing the Fourier transform of the cube, the frames need coregistered to avoid phase ramps in the Fourier transform modulus. The following algorithms are available for registering the cube, set with the register keyword argument. Extra options can be provided to kwargs...\n\n:dft - use SubpixelRegistration.jl to register the frames using their phase offsets. The reference frame will be the one with the highest metric, and keyword arguments like upsample_factor and refidx can be passed directly. By default the refidx will be set to the frame with the highest peak flux.\n:peak - register to maximum value\n:com - register to center of mass\n\nKeyword arguments\n\ndims - the dimension along which to perform lucky imaging (required)\nq - the selection quantile (required)\nregister - the method used for registration. Default is :dft\nmaxfreq - if provided, will exclude frequencies higher than maxfreq * maximum(fftfreqs). In other words, a value of 1 uses the full Fourier transform, but a value of 0.5 will low-pass filter\nkwargs... - additional keyword arguments will be passed to the register method (e.g., upsample_factor)\n\nExamples\n\njulia> cube = # load data ...\n\njulia> res = fourier_lucky_image(cube; dims=3, q=0.5, upsample_factor=10);\n\n\n\n\n\n","category":"function"},{"location":"api/#LuckyImaging.testcube","page":"API/Reference","title":"LuckyImaging.testcube","text":"testcube()\n\nReturn the filepath of the test cube artifact. This needs to be loaded, using FITSIO.jl, for example. This data is a sequence of frames captured on the VAMPIRES instrument on Subaru/SCExAO.[2]\n\n[2]: VAMPIRES\n\nExamples\n\njulia> using FITSIO\n\njulia> cube = read(FITS(testcube())[1])\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example uses some real on-sky data taken at high frame rates (~40 Hz) from the Subaru telescope.","category":"page"},{"location":"examples/#Setup","page":"Examples","title":"Setup","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"To run these examples, you will need to install the following packages","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Pkg\nPkg.add([\"FITSIO\", \"LuckyImaging\", \"Plots\", \"SubpixelRegistration\"])","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using FITSIO\nusing LuckyImaging\nusing Plots\n\n# set up plotting function\nfunction imshow(arr; kwargs...)\n    scaled_arr = log10.(arr' .- minimum(arr))\n    # get 100x100 window around peak\n    idx = argmax(scaled_arr)\n    ranges = range.(idx.I .- 50, idx.I .+ 50)\n    varr = @view scaled_arr[ranges...]\n    xaxis = axes(arr, 1)[ranges[1]]\n    yaxis = axes(arr, 2)[ranges[2]]\n    # plot\n    heatmap(xaxis, yaxis, varr;\n        xlims=extrema(xaxis), ylims=extrema(yaxis),\n        aspect_ratio=1, c=:magma, size=(450, 400),\n        cbar=true, kwargs...)\n    # add black \"+\" on center of frame (on cell)\n    scatter!([128.5], [128.5], c=:black, marker=:+, lab=\"\")\nend\nnothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"let's look at the first few frames from the cube","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# load data using DataDeps.jl (you may be prompted)\nfilename = testcube()\ncube = read(FITS(filename)[1])\nimshow(cube[:, :, 1], title=\"frame 1\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"imshow(cube[:, :, 2], title=\"frame 2\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"imshow(cube[:, :, 3], title=\"frame 3\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"we can see some really exceptional cases of poor seeing, with cases where there are two bright copies of the PSF (frame 1)!","category":"page"},{"location":"examples/#Long-exposure","page":"Examples","title":"Long exposure","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"To get a benchmark, let's see what a long exposure would look like by averaging the frames as they are","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Statistics\n\nlong_expo = mean(cube, dims=3)[:, :, 1]\nimshow(long_expo, title=\"long exposure\")","category":"page"},{"location":"examples/#Shit-and-add","page":"Examples","title":"Shit-and-add","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The simplest way to improve our image is to co-align the frames and add them together. This is also called \"shift-and-add\". To do the registration, we will use SubpixelRegistration.jl for efficient FFT-based registration. To improve performance, we should choose a reference frame that is peak quality as possible. We can use the peak flux in each frame as a quality metric to aid our selection.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"peaks = map(maximum, eachslice(cube, dims=3))\nrefidx = argmax(peaks)\nimshow(cube[:, :, refidx], title=\"frame $refidx\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"and, just for fun, the worst frame","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"worstidx = argmin(peaks)\nimshow(cube[:, :, worstidx], title=\"frame $worstidx\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using SubpixelRegistration\n\n# shift reference to center\nrefshift = argmax(cube[:, :, refidx]).I .- (128.5, 128.5)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"cube[:, :, refidx] .= fourier_shift(cube[:, :, refidx], refshift)\nregistered = coregister(cube; dims=3, refidx, upsample_factor=10)\n\nshift_added = mean(registered, dims=3)[:, :, 1]\n\nimshow(shift_added, title=\"shift and add\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"this entire process is equivalent to classic lucky imaging with a selection quantile of 0","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"lucky_classic_0 = lucky_image(cube; dims=3, q=0,\n    alg=:classic, upsample_factor=10)\n\nimshow(lucky_classic_0, title=\"classic (0%)\")","category":"page"},{"location":"examples/#Classic-lucky-imaging","page":"Examples","title":"Classic lucky imaging","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Classic lucky imaging uses some metric to select or discard entire frames from the cube. classic_lucky_image describes these metrics in more detail. We need to specify a selection quantile, in other words, one minus the selection fraction. The selected frames will be shift-and-added. By default, the frames will be coregistered using SubpixelRegistration.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"lucky_classic_50 = lucky_image(cube; dims=3, q=0.5,\n    alg=:classic, upsample_factor=10)\nimshow(lucky_classic_50, title=\"classic (50%)\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"lucky_classic_90 = lucky_image(cube; dims=3, q=0.9,\n    alg=:classic, upsample_factor=10)\nimshow(lucky_classic_90, title=\"classic (90%)\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"lucky_classic_99 = lucky_image(cube; dims=3, q=0.99,\n    alg=:classic, upsample_factor=10)\nimshow(lucky_classic_99, title=\"classic (99%)\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can see that the higher our selection quantile (i.e., a lower selection fraction), the better our angular resolution is. However, the lower total number of frames combined lowers the signal-to-noise ratio.","category":"page"},{"location":"examples/#Fourier-lucky-imaging","page":"Examples","title":"Fourier lucky imaging","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In order to improve on the classic lucky imaging technique, Garrel, Guyonn, and Baudoz (2012)[1] proposed using Fourier amplitudes for selection and performing image synthesis. This technique uses multiple frequencies that maximize the modulation transfer function (MTF), which in theory approaches the limit of the diffraction-limited optical transfer function (OTF).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"lucky_fourier_50 = lucky_image(cube; dims=3, q=0.5,\n    alg=:fourier, maxfreq=0.75, upsample_factor=10)\nimshow(lucky_fourier_50, title=\"Fourier (50%)\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"lucky_fourier_90 = lucky_image(cube; dims=3, q=0.9,\n    alg=:fourier, maxfreq=0.75, upsample_factor=10)\nimshow(lucky_fourier_90, title=\"Fourier (90%)\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"lucky_fourier_99 = lucky_image(cube; dims=3, q=0.99,\n    alg=:fourier, maxfreq=0.75, upsample_factor=10)\nimshow(lucky_fourier_99, title=\"Fourier (99%)\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Let's directly compare the Fourier selection versus the classic selection process","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"plot(\n    imshow(lucky_classic_90, title=\"classic (90%)\"),\n    imshow(lucky_fourier_90, title=\"Fourier (90%)\"),\n    cbar=false, clims=(1, 5), size=(600, 340)\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[1]: Vincent Garrel et al 2012 \"A Highly Efficient Lucky Imaging Algorithm: Image Synthesis Based on Fourier Amplitude Selection\" PASP 124 861","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LuckyImaging","category":"page"},{"location":"#LuckyImaging.jl","page":"Home","title":"LuckyImaging.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Code) (Image: Build Status) (Image: PkgEval) (Image: Coverage) (Image: License)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use the LuckyImaging library, first install it using Pkg","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]add LuckyImaging","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To import the library","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LuckyImaging","category":"page"},{"location":"","page":"Home","title":"Home","text":"then, load a data cube","category":"page"},{"location":"","page":"Home","title":"Home","text":"cube = # ...","category":"page"},{"location":"","page":"Home","title":"Home","text":"we can use lucky_image as an entry point to both classic and Fourier lucky imaging methods","category":"page"},{"location":"","page":"Home","title":"Home","text":"image = lucky_image(cube; dims=3, q=0.9, alg=:classic, register=:peak)\nimagef = lucky_image(cube; dims=3, q=0.5, alg=:fourier, upsample_factor=10)","category":"page"},{"location":"","page":"Home","title":"Home","text":"see the docstrings for classic_lucky_image and fourier_lucky_image for more information on the algorithms and their options.","category":"page"},{"location":"#Contributing-and-Support","page":"Home","title":"Contributing and Support","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you would like to contribute, feel free to open a pull request. If you want to discuss something before contributing, head over to discussions and join or open a new topic. If you're having problems with something, please open an issue.","category":"page"}]
}
