var documenterSearchIndex = {"docs":
[{"location":"api/#API/Reference","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"","category":"page"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"Modules = [LuckyImaging]","category":"page"},{"location":"api/#LuckyImaging.classic_lucky_image!-Union{Tuple{T}, Tuple{AbstractMatrix, AbstractArray{T, 3}}} where T","page":"API/Reference","title":"LuckyImaging.classic_lucky_image!","text":"classic_lucky_image!(out::AbstractMatrix, cube; dims, q, kwargs...)\n\nPerform classic lucky imaging and store the combined frame in out. See classic_lucky_image for a full description.\n\n\n\n\n\n","category":"method"},{"location":"api/#LuckyImaging.classic_lucky_image-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T","page":"API/Reference","title":"LuckyImaging.classic_lucky_image","text":"classic_lucky_image(cube; dims, q, metric=:peak, register=:dft, kwargs...)\n\nPerform classic lucky imaging for a cube of data along dimension dims. The selection fraction is set by the quantile q, where q=0.9 corresponds to a 10% selectrion fraction. The following options are available for modifying the metric used for selection as well as how the frames are registered.\n\nMetrics\n\nThe following metrics, set with the keyword argument metric are available\n\n:peak - the maximum value\n:mean - the mean value\nother - pass a function with the signature f(::AbstractMatrix) which returns a single value\n\nRegistration\n\nThe following options for registering the selected frames are available, set with the registerkeyword argument. Extra options can be provided to kwargs...\n\n:dft - use SubpixelRegistration.jl to register the frames using their phase offsets. The reference frame will be the one with the highest metric, and keyword arguments like upsample_factor can be passed directly.\n:peak - register to maximum value\n:com - register to center of mass\n\nKeyword arguments\n\ndims - the dimension along which to perform lucky imaging (required)\nq - the selection quantile (required)\nmetric - the metric used for selection. Default is :peak\nregister - the method used for registration. Default is :dft\nwindow - if provided, will measure the metric and frame offsets inside a centered window with window side length.\nkwargs... - additional keyword arguments will be passed to the register method (e.g., upsample_factor)\n\nExamples\n\njulia> cube = # load data ...\n\njulia> res = classic_lucky_image(cube; dims=3, q=0.9, upsample_factor=10)\n\nSee Also\n\nclassic_lucky_image!\n\n\n\n\n\n","category":"method"},{"location":"api/#LuckyImaging.fourier_lucky_image!-Union{Tuple{T}, Tuple{AbstractMatrix, AbstractArray{T, 3}}} where T","page":"API/Reference","title":"LuckyImaging.fourier_lucky_image!","text":"fourier_lucky_image!(out::AbstractMatrix, cube; dims, q, kwargs...)\n\nPerform Fourier lucky imaging and store the combined frame in out. See fourier_lucky_image for a full descripton.\n\n\n\n\n\n","category":"method"},{"location":"api/#LuckyImaging.fourier_lucky_image-Union{Tuple{AbstractArray{T, 3}}, Tuple{T}} where T","page":"API/Reference","title":"LuckyImaging.fourier_lucky_image","text":"fourier_lucky_image(cube; dims, q, register=:dft, kwargs...)\n\nPerform Fourier lucky imaging following the algorithm in Garrel, Guyon, and Baudoz (2012).[1] This technique provides superior sharpness compared to classic lucky imaging for the same selection percentage. This means for a desired angular resolution (or Strehl ratio) a higher signal-to-noise ratio can be achieved.\n\n[1]: Vincent Garrel et al 2012 \"A Highly Efficient Lucky Imaging Algorithm: Image Synthesis Based on Fourier Amplitude Selection\" PASP 124 861\n\nRegistration\n\nBefore processing the Fourier transform of the cube, the frames need coregistered to avoid phase ramps in the Fourier transform modulus. The following algorithms are available for registering the cube, set with the register keyword argument. Extra options can be provided to kwargs...\n\n:dft - use SubpixelRegistration.jl to register the frames using their phase offsets. The reference frame will be the one with the highest metric, and keyword arguments like upsample_factor and refidx can be passed directly. By default the refidx will be set to the frame with the highest peak flux.\n:peak - register to maximum value\n:com - register to center of mass\n\nKeyword arguments\n\ndims - the dimension along which to perform lucky imaging (required)\nq - the selection quantile (required)\nregister - the method used for registration. Default is :dft\nmaxfreq - if provided, will exclude frequencies higher than maxfreq * maximum(fftfreqs). In other words, a value of 1 uses the full Fourier transform, but a value of 0.5 will low-pass filter\nkwargs... - additional keyword arguments will be passed to the register method (e.g., upsample_factor)\n\nExamples\n\njulia> cube = # load data ...\n\njulia> res = fourier_lucky_image(cube; dims=3, q=0.5, upsample_factor=10);\n\nSee also\n\nfourier_lucky_image!\n\n\n\n\n\n","category":"method"},{"location":"api/#LuckyImaging.lucky_image-Union{Tuple{AbstractArray{T, 3}}, Tuple{T}} where T","page":"API/Reference","title":"LuckyImaging.lucky_image","text":"lucky_image(cube; dims, q, alg=:fourier, kwargs...)\n\nPerform lucky imaging along dims with the chosen algorithm. If alg is :fourier fourier_lucky_image will be used, otherwise if it is :classic classic_lucky_image will be used. The keyword arguments for those methods can be passed directly through this method. q is the selection quantile; in other words, it is one minus the selection fraction.\n\nExamples\n\njulia> cube = # load data\n\njulia> image = lucky_image(cube; dims=3, q=0.9, alg=:classic, upsample_factor=10);\n\njulia> imagef = lucky_image(cube; dims=3, q=0.5, alg=:fourier, upsample_factor=10);\n\nSee also\n\nclassic_lucky_image, fourier_lucky_image\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LuckyImaging","category":"page"},{"location":"#LuckyImaging","page":"Home","title":"LuckyImaging","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Code) (Image: Build Status) (Image: PkgEval) (Image: Coverage) (Image: License)","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use the LuckyImaging library, first install it using Pkg","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]add LuckyImaging","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To import the library","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LuckyImaging","category":"page"},{"location":"#Contributing-and-Support","page":"Home","title":"Contributing and Support","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you would like to contribute, feel free to open a pull request. If you want to discuss something before contributing, head over to discussions and join or open a new topic. If you're having problems with something, please open an issue.","category":"page"}]
}
